import streamlit as st
import matplotlib.pyplot as plt
import datetime
import json
import os

DATA_FILE = "data.json"

# -------------------------
# Functions for storage
# -------------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"users": {}, "records": {}}

def save_data():
    data = {
        "users": st.session_state["users"],
        "records": st.session_state["records"]
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# -------------------------
# Initialize session state
# -------------------------
if "loaded" not in st.session_state:
    data = load_data()
    st.session_state["users"] = data.get("users", {})
    st.session_state["records"] = data.get("records", {})
    st.session_state["current_user"] = None
    st.session_state["page"] = "login"
    st.session_state["loaded"] = True

# -------------------------
# Custom CSS (‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•)
# -------------------------
st.markdown("""
    <style>
        body {background-color: #f8f4f9;}
        .main {background-color: #ffffff;}
        h1, h2, h3 {color: #d63384;}
        .stButton>button {
            background-color: #FFB6C1; /* ‡∏ä‡∏°‡∏û‡∏π‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• */
            color: #333;
            border-radius: 10px;
            border: none;
            padding: 0.5em 1em;
        }
        .stButton>button:hover {
            background-color: #FFFDD0; /* ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• */
            color: #000;
        }
        .stTabs [role="tab"] {
            background-color: #f4d6e7;
            color: #333;
            border-radius: 8px;
            padding: 0.3em 1em;
        }
        .stTabs [role="tab"][aria-selected="true"] {
            background-color: #d63384;
            color: white;
        }
    </style>
""", unsafe_allow_html=True)

# -------------------------
# Pages
# -------------------------
def login_page():
    st.title("üîê Login")
    tab1, tab2 = st.tabs(["‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"])
    
    with tab1:
        username = st.text_input("Username", key="login_user")
        password = st.text_input("Password", type="password", key="login_pass")
        if st.button("Login"):
            if username in st.session_state["users"] and st.session_state["users"][username] == password:
                st.session_state["current_user"] = username
                st.session_state["page"] = "dashboard"
                st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")
            else:
                st.error("Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå")
        st.caption("‚ÑπÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° 2 ‡∏£‡∏≠‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

    with tab2:
        new_user = st.text_input("New Username", key="new_user")
        new_pass = st.text_input("New Password", type="password", key="new_pass")
        if st.button("Sign Up"):
            if new_user in st.session_state["users"]:
                st.error("Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚ùå")
            else:
                st.session_state["users"][new_user] = new_pass
                save_data()
                st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ")

def dashboard_page():
    st.title("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    
    if st.button("üö™ Logout"):
        st.session_state["current_user"] = None
        st.session_state["page"] = "login"
        st.experimental_rerun()
    
    username = st.session_state["current_user"]
    today = datetime.date.today()
    yesterday = today - datetime.timedelta(days=1)

    # -------------------
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
    # -------------------
    records_y = st.session_state["records"].get(username, {}).get(str(yesterday), {"income": [], "expense": []})
    total_income_y = sum([r["amount"] for r in records_y["income"]])
    total_expense_y = sum([r["amount"] for r in records_y["expense"]])
    saving_y = total_income_y * 0.3
    balance_y = total_income_y * 0.7 - total_expense_y

    # -------------------
    # ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    # -------------------
    st.markdown("---")
    records_t = st.session_state["records"].get(username, {}).get(str(today), {"income": [], "expense": []})
    total_income_t = sum([r["amount"] for r in records_t["income"]])
    total_expense_t = sum([r["amount"] for r in records_t["expense"]])
    saving_t = total_income_t * 0.3
    balance_t = total_income_t * 0.7 - total_expense_t

    st.subheader("üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

    # üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    fig, ax = plt.subplots()
    ax.bar(["Income", "Expense"], [total_income_t, total_expense_t], color=["#FFB6C1", "#999999"])
    st.pyplot(fig)

    st.write(f"üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö: {total_income_t}")
    st.write(f"üìâ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢: {total_expense_t}")
    st.write(f"üè¶ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö (30%): {saving_t}")
    st.write(f"‚úÖ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: {balance_t}")

    
    st.subheader("üìÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô")
    fig, ax = plt.subplots()
    ax.bar(["Income", "Expense"], [total_income_y, total_expense_y], color=["#FFB6C1", "#999999"])
    st.pyplot(fig)
    
    st.write(f"üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö: {total_income_y}")
    st.write(f"üìâ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢: {total_expense_y}")
    st.write(f"üè¶ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö (30%): {saving_y}")
    st.write(f"‚úÖ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: {balance_y}")

    # -------------------
    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    # -------------------
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("+ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"):
            st.session_state["page"] = "add_income"
    with col2:
        if st.button("- ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"):
            st.session_state["page"] = "add_expense"
    st.caption("‚ÑπÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° 2 ‡∏£‡∏≠‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

def add_income_page():
    st.title("‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
    username = st.session_state["current_user"]
    today = str(datetime.date.today())
    
    income_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏ö‡∏ô‡∏±‡∏™", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"])
    amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0)
    note = st.text_area("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
    
    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
        if username not in st.session_state["records"]:
            st.session_state["records"][username] = {}
        if today not in st.session_state["records"][username]:
            st.session_state["records"][username][today] = {"income": [], "expense": []}
        st.session_state["records"][username][today]["income"].append({"type": income_type, "amount": amount, "note": note})
        save_data()
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")
        st.session_state["page"] = "dashboard"
    st.caption("‚ÑπÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° 2 ‡∏£‡∏≠‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    st.caption("‚ÑπÔ∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ ( , )")

def add_expense_page():
    st.title("‚ûñ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    username = st.session_state["current_user"]
    today = str(datetime.date.today())
    
    expense_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"])
    amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0)
    note = st.text_area("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
    
    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
        if username not in st.session_state["records"]:
            st.session_state["records"][username] = {}
        if today not in st.session_state["records"][username]:
            st.session_state["records"][username][today] = {"income": [], "expense": []}
        st.session_state["records"][username][today]["expense"].append({"type": expense_type, "amount": amount, "note": note})
        save_data()
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")
        st.session_state["page"] = "dashboard"
    st.caption("‚ÑπÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° 2 ‡∏£‡∏≠‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    st.caption("‚ÑπÔ∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ ( , )")

# -------------------------
# Navigation
# -------------------------
if st.session_state["current_user"] is None:
    login_page()
else:
    if st.session_state["page"] == "dashboard":
        dashboard_page()
    elif st.session_state["page"] == "add_income":
        add_income_page()
    elif st.session_state["page"] == "add_expense":
        add_expense_page()
    else:
        st.session_state["page"] = "dashboard"
        dashboard_page()
